generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                      @id @unique @default(autoincrement())
  userName                 String                   @unique
  hashPassword             String
  email                    String
  messageState             MessageState             @default(All)
  friendRequestState       FriendRequestState       @default(All)
  commentHistoryState      CommentHistoryState      @default(All)
  youtube                  String?
  twitter                  String?
  twitch                   String?
  modLevel                 ModLevel                 @default(None)
  /// HEX format without "#"
  commentColor             String?
  modRequested             Boolean                  @default(false)
  isDisabled               Boolean                  @default(false)
  registerDate             DateTime                 @default(now()) @db.Timestamptz(6)
  blocks                   BlockList?
  comments                 Comment[]
  friends                  FriendList?
  friendRequests           FriendRequest[]
  levels                   Level[]
  messages                 Message[]
  suggestLevelDifficulties SuggestLevelDifficulty[]
  suggestLevels            SuggestLevel[]
  userComments             UserComment[]
  stats                    UserStats?

  @@map("users")
}

model UserStats {
  userId           Int       @id @unique
  stars            Int       @default(0)
  moons            Int       @default(0)
  secretCoins      Int       @default(0)
  userCoins        Int       @default(0)
  demons           Int       @default(0)
  creatorPoints    Int       @default(0)
  diamonds         Int       @default(0)
  iconType         Int       @default(0)
  iconCube         Int       @default(1)
  iconShip         Int       @default(1)
  iconBall         Int       @default(1)
  iconUfo          Int       @default(1)
  iconWave         Int       @default(1)
  iconRobot        Int       @default(1)
  iconSpider       Int       @default(1)
  iconSwing        Int       @default(1)
  iconJetpack      Int       @default(1)
  iconExplosion    Int       @default(1)
  primaryColor     Int       @default(0)
  secondaryColor   Int       @default(3)
  glowColor        Int       @default(-1)
  hasGlow          Boolean   @default(false)
  totalSmallChests Int       @default(0)
  lastSmallChest   DateTime? @db.Timestamptz(6)
  totalBigChests   Int       @default(0)
  lastBigChest     DateTime? @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id])

  @@map("userStats")
}

model UserComment {
  id       Int      @id @default(autoincrement())
  userId   Int
  comment  String
  likes    Int      @default(0)
  isSpam   Boolean  @default(false)
  postDate DateTime @default(now()) @db.Timestamptz(6)
  user     User     @relation(fields: [userId], references: [id])

  @@map("userComments")
}

model Level {
  id                  Int                      @id
  authorId            Int
  name                String
  description         String?
  version             Int
  length              LevelLength
  visibility          Visibility
  difficulty          Difficulty               @default(NA)
  ratingType          LevelRating              @default(None)
  originalLevelId     Int
  requestedStars      Int
  stars               Int                      @default(0)
  coins               Int
  likes               Int                      @default(0)
  downloads           Int                      @default(0)
  objectsCount        Int
  defaultSongId       Int
  sfxIds              Int[]
  songIds             Int[]
  isCustomSong        Boolean
  isCoinsVerified     Boolean                  @default(false)
  hasLdm              Boolean
  hasTwoPlayerMode    Boolean
  createDate          DateTime                 @default(now()) @db.Timestamptz(6)
  updateDate          DateTime                 @default(now()) @db.Timestamptz(6)
  rateDate            DateTime?                @db.Timestamptz(6)
  event               Event?
  author              User                     @relation(fields: [authorId], references: [id])
  suggestDifficulties SuggestLevelDifficulty[]
  suggest             SuggestLevel?

  @@map("levels")
}

model Event {
  id         Int       @id @default(autoincrement())
  type       EventType
  levelId    Int       @unique
  assignDate DateTime  @default(now()) @db.Timestamptz(6)
  level      Level     @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Gauntlet {
  id       Int   @id
  /// Array length is 5
  levelIds Int[]

  @@map("gauntlets")
}

model MapPack {
  id         Int               @id @default(autoincrement())
  name       String
  difficulty MapPackDifficulty
  stars      Int
  coins      Int
  levelIds   Int[]
  color      String            @default("ffffff")
  createDate DateTime          @default(now()) @db.Timestamptz(6)

  @@map("mapPacks")
}

model SuggestLevel {
  id          Int               @id @default(autoincrement())
  suggestById Int
  levelId     Int               @unique
  difficulty  SuggestDifficulty
  ratingType  LevelRating
  stars       Int
  suggestDate DateTime          @default(now()) @db.Timestamptz(6)
  level       Level             @relation(fields: [levelId], references: [id], onDelete: Cascade)
  suggestBy   User              @relation(fields: [suggestById], references: [id])

  @@map("suggestLevels")
}

model SuggestLevelDifficulty {
  id          Int      @id @default(autoincrement())
  suggestById Int
  levelId     Int
  stars       Int
  suggestDate DateTime @default(now()) @db.Timestamptz(6)
  level       Level    @relation(fields: [levelId], references: [id], onDelete: Cascade)
  suggestBy   User     @relation(fields: [suggestById], references: [id])

  @@map("suggestLevelDifficulties")
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  itemId      Int
  comment     String
  percent     Int      @default(0)
  likes       Int      @default(0)
  isSpam      Boolean  @default(false)
  isLevelList Boolean  @default(false)
  postDate    DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Message {
  id          Int      @id @default(autoincrement())
  userId      Int
  recipientId Int
  subject     String
  body        String
  isNew       Boolean  @default(true)
  sendDate    DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  recipientId Int
  comment     String?
  isNew       Boolean  @default(true)
  sendDate    DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id])

  @@map("friendRequests")
}

model FriendList {
  userId  Int    @id @unique
  /// [FriendsInfo]
  friends Json[]
  user    User   @relation(fields: [userId], references: [id])

  @@map("friendList")
}

model BlockList {
  userId   Int   @id @unique
  blockIds Int[]
  user     User  @relation(fields: [userId], references: [id])

  @@map("blockList")
}

model Artist {
  id       Int    @id @default(autoincrement())
  name     String
  resource String @unique
  songs    Song[]

  @@map("artists")
}

model Song {
  id         Int      @id @default(autoincrement())
  artistId   Int
  name       String
  size       Float
  resource   String   @unique
  link       String   @unique
  isDisabled Boolean  @default(false)
  uploadDate DateTime @default(now()) @db.Timestamptz(6)
  artist     Artist   @relation(fields: [artistId], references: [id])

  @@map("songs")
}

model Quest {
  id     Int       @id @default(autoincrement())
  type   QuestType
  amount Int
  reward Int
  name   String

  @@map("quests")
}

enum QuestType {
  Orbs
  Coins
  Stars
}

enum ModLevel {
  None
  Mod
  ElderMod
  LeaderboardMod
  Admin
}

enum MessageState {
  All
  Friends
  None
}

enum FriendRequestState {
  All
  None
}

enum CommentHistoryState {
  All
  Friends
  None
}

enum LevelLength {
  Tiny
  Short
  Medium
  Long
  XL
  Platformer
}

enum LevelRating {
  None
  Featured
  Epic
  Legendary
  Mythic
}

enum Visibility {
  Listed
  FriendsOnly
  Unlisted
}

enum Difficulty {
  NA
  Auto
  Easy
  Normal
  Hard
  Harder
  Insane
  EasyDemon
  MediumDemon
  HardDemon
  InsaneDemon
  ExtremeDemon
}

enum MapPackDifficulty {
  Auto
  Easy
  Normal
  Hard
  Harder
  Insane
  EasyDemon
  MediumDemon
  HardDemon
  InsaneDemon
  ExtremeDemon
}

enum SuggestDifficulty {
  Auto
  Easy
  Normal
  Hard
  Harder
  Insane
  Demon
}

enum EventType {
  Daily
  Weekly
}

enum ListRating {
  None
  Featured
}
