generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  userName            String              @unique
  passHash            String
  email               String
  messageState        MessageState        @default(All)
  friendRequestState  FriendRequestState  @default(All)
  commentHistoryState CommentHistoryState @default(All)
  youtube             String              @default("")
  twitter             String              @default("")
  twitch              String              @default("")
  modLevel            ModLevel            @default(None)
  commentColor        String              @default("#ffffff")
  modRequested        Boolean             @default(false)
  isDisabled          Boolean             @default(false)
  registerDate        DateTime            @default(now()) @db.Timestamptz(6)
  blockList           BlockList[]
  comments            Comment[]
  friendList          FriendList[]
  friendRequests      FriendRequest[]
  messages            Message[]
  userComments        UserComment[]
  stats               UserStats?
}

model UserStats {
  userId           Int       @id @unique
  stars            Int       @default(0)
  moons            Int       @default(0)
  secretCoins      Int       @default(0)
  userCoins        Int       @default(0)
  demons           Int       @default(0)
  creatorPoints    Int       @default(0)
  diamonds         Int       @default(0)
  iconType         Int       @default(0)
  iconCube         Int       @default(1)
  iconShip         Int       @default(1)
  iconBall         Int       @default(1)
  iconUfo          Int       @default(1)
  iconWave         Int       @default(1)
  iconRobot        Int       @default(1)
  iconSpider       Int       @default(1)
  iconSwing        Int       @default(1)
  iconJetpack      Int       @default(1)
  iconExplosion    Int       @default(1)
  primaryColor     Int       @default(0)
  secondaryColor   Int       @default(3)
  glowColor        Int       @default(-1)
  hasGlow          Boolean   @default(false)
  totalSmallChests Int       @default(0)
  lastSmallChest   DateTime? @db.Timestamptz(6)
  totalBigChests   Int       @default(0)
  lastBigChest     DateTime? @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id])
}

model UserComment {
  id         Int      @id @default(autoincrement())
  userId     Int
  comment    String
  likes      Int      @default(0)
  isSpam     Boolean  @default(false)
  postedDate DateTime @default(now()) @db.Timestamptz(6)
  user       User     @relation(fields: [userId], references: [id])
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  itemId      Int
  comment     String
  percent     Int      @default(0)
  likes       Int      @default(0)
  isSpam      Boolean  @default(false)
  isLevelList Boolean  @default(false)
  postedDate  DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  userId      Int
  recipientId Int
  subject     String
  body        String
  isNew       Boolean  @default(true)
  postedDate  DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id])
}

model FriendList {
  id       Int     @id @default(autoincrement())
  userId   Int
  friendId Int
  isNew    Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id])
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  recipientId Int
  comment     String   @default("")
  postedDate  DateTime @default(now()) @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id])
}

model BlockList {
  id            Int  @id @default(autoincrement())
  userId        Int
  blockedUserId Int
  user          User @relation(fields: [userId], references: [id])
}

model Artist {
  id       Int    @id @default(autoincrement())
  name     String
  resource String @unique
  songs    Song[]
}

model Song {
  id         Int      @id @default(autoincrement())
  artistId   Int
  name       String
  size       Float
  resource   String   @unique
  link       String   @unique
  isDisabled Boolean  @default(false)
  uploadTime DateTime @default(now()) @db.Timestamptz(6)
  artist     Artist   @relation(fields: [artistId], references: [id])
}

model Quest {
  id     Int       @id @default(autoincrement())
  type   QuestType
  amount Int
  reward Int
  name   String
}

enum QuestType {
  Orbs
  Coins
  Stars
}

enum ModLevel {
  None
  Mod
  ElderMod
  ListMod
  Admin
}

enum MessageState {
  All
  Friends
  None
}

enum FriendRequestState {
  All
  None
}

enum CommentHistoryState {
  All
  Friends
  None
}
